name: Build and Release Rust

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

env:
  PROJECT_NAME: "nc-gcode-interpreter"

jobs:
  build:
    # Set the job to run on the platform specified by the matrix below
    runs-on: ${{ matrix.runner }}

    # Define the build matrix for cross-compilation
    strategy:
      matrix:
        include:
          - name: linux-amd64
            runner: ubuntu-24.04
            target: x86_64-unknown-linux-gnu
          # - name: linux-arm64
          #   runner: ubuntu-24.04
          #   target: aarch64-unknown-linux-gnu
          - name: win-amd64
            runner: windows-2022
            target: x86_64-pc-windows-msvc
          # - name: win-arm64
          #   runner: windows-2022
          #   target: aarch64-pc-windows-msvc
          # - name: macos-amd64
          #   runner: macos-14
          #   target: x86_64-apple-darwin
          # - name: macos-arm64
          #   runner: macos-14
          #   target: aarch64-apple-darwin

    # The steps to run for each matrix item
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: "${{ matrix.target }}"

      - name: Setup Python 3.12
        uses: actions/setup-python@v5
        with:
            python-version: '3.12'

      - name: Set up Python environment for Windows
        if: runner.os == 'Windows'
        run: |
          python -m pip install --upgrade pip
          pip install setuptools-rust
          echo "PYTHON_EXTENSION_PATH=$(python -c 'import sysconfig; print(sysconfig.get_path(\"include\"))')" >> $GITHUB_ENV
          echo "PYTHON_LIB_PATH=$(python -c 'import sysconfig; print(sysconfig.get_config_var(\"LIBDIR\"))')" >> $GITHUB_ENV

      - name: Setup Cache
        uses: Swatinem/rust-cache@v2

      - name: Build Binary
        run: cargo build --verbose --locked --release --target ${{ matrix.target }}
        env:
          PYO3_CROSS_PYTHON_VERSION: 3.12
          RUSTFLAGS: ${{ runner.os == 'Windows' && format('-C link-arg=/LIBPATH:{0}', env.PYTHON_LIB_PATH) || '' }}
          PYTHON_SYS_EXECUTABLE: python

      - name: Release Binary
        shell: bash
        run: |
          BIN_SUFFIX=""
          if [[ "${{ matrix.runner }}" == "windows-latest" ]]; then
            BIN_SUFFIX=".exe"
          fi

          # The built binary output location
          BIN_OUTPUT="target/${{ matrix.target }}/release/${PROJECT_NAME}${BIN_SUFFIX}"

          # Define a better name for the final binary
          BIN_RELEASE="${PROJECT_NAME}-${{ matrix.name }}${BIN_SUFFIX}"
          BIN_RELEASE_VERSIONED="${PROJECT_NAME}-${{ github.ref_name }}-${{ matrix.name }}${BIN_SUFFIX}"

          # Move the built binary where you want it
          mkdir -p artifacts
          mv "${BIN_OUTPUT}" "artifacts/${BIN_RELEASE_VERSIONED}"

          # Save the BIN_RELEASE_VERSIONED name to a file for use in the next step
          echo "${BIN_RELEASE_VERSIONED}" > bin_release_versioned.txt

      - name: Get Binary Name
        id: get_bin_name
        run: echo "bin_name=$(cat bin_release_versioned.txt)" >> $GITHUB_OUTPUT

      - name: Upload Artifact
        uses: softprops/action-gh-release@v2
        with:
          files: artifacts/${{ steps.get_bin_name.outputs.bin_name }}
